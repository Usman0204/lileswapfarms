{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Quecko\\\\l-lileSWAP\\\\updated farms repo\\\\lileswapfarms\\\\src\\\\views\\\\Farms\\\\Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Image, Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const ethPriceUsd = usePriceEthBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X');\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X');\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    var _farmsLP$find;\n\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    const cakePriceVsBNB = new BigNumber(((_farmsLP$find = farmsLP.find(farm => farm.pid === CAKE_POOL_PID)) === null || _farmsLP$find === void 0 ? void 0 : _farmsLP$find.tokenPriceVsQuote) || 0);\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\n        return farm;\n      }\n\n      const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight);\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR); // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n\n      let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n        apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice);\n      } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n        apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken);\n      } else if (farm.dual) {\n        const cakeApy = farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        const dualApy = farm.tokenPriceVsQuote && new BigNumber(farm.tokenPriceVsQuote).times(farm.dual.rewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        apy = cakeApy && dualApy && cakeApy.plus(dualApy);\n      }\n\n      let liquidity = farm.lpTotalInQuoteToken;\n\n      if (!farm.lpTotalInQuoteToken) {\n        liquidity = null;\n      }\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        liquidity = bnbPrice.times(farm.lpTotalInQuoteToken);\n      }\n\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        liquidity = cakePrice.times(farm.lpTotalInQuoteToken);\n      }\n\n      if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n        liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken);\n      }\n\n      return { ...farm,\n        apy,\n        liquidity\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this));\n  }, [bnbPrice, farmsLP, account, cakePrice, ethPriceUsd]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      color: \"primary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: tokenMode ? TranslateString(10002, 'Stake tokens to earn L ́ile') : TranslateString(320, 'Stake LP tokens to earn L ́ile')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: TranslateString(10000, 'Deposit Fee will be used to buyback L ́ile')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n      stakedOnly: stakedOnly,\n      setStakedOnly: setStakedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsList(inactiveFarms, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"/images/LILE/lile_chest.jpg\",\n      alt: \"illustration\",\n      width: 1352,\n      height: 587,\n      responsive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"etifgi1yl94RDQ6KfvkvBQrhrd8=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, usePriceEthBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["D:/Quecko/l-lileSWAP/updated farms repo/lileswapfarms/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Image","Heading","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","CAKE_POOL_PID","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","usePriceEthBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","ethPriceUsd","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","cakePriceVsBNB","find","pid","tokenPriceVsQuote","farmsToDisplayWithAPY","map","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","times","poolWeight","cakeRewardPerYear","apy","div","quoteTokenSymbol","BUSD","UST","ETH","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","liquidity","BNB","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK , CAKE_POOL_PID} from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd , usePriceEthBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const ethPriceUsd = usePriceEthBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        let liquidity = farm.lpTotalInQuoteToken\r\n\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          liquidity = null\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          liquidity = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          liquidity = cakePrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken)\r\n        }\r\n\r\n        return { ...farm, apy, liquidity }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, farmsLP,account, cakePrice , ethPriceUsd],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {tokenMode\r\n          ? TranslateString(10002, 'Stake tokens to earn L ́ile')\r\n          : TranslateString(320, 'Stake LP tokens to earn L ́ile')}\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback L ́ile')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"/images/LILE/lile_chest.jpg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}