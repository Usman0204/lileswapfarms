{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { ethers } from 'ethers';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { useMasterchef, useCake, useLottery } from './useContract'; // Approve a Farm\n\nexport const useApprove = lpContract => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account);\n      dispatch(fetchFarmUserDataAsync(account));\n      return tx;\n    } catch (e) {\n      console.log(\"error::\", e);\n      return false;\n    }\n  }, [account, dispatch, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n// export const useSousApprove = (lpContract: Contract, sousId) => {\n//   const dispatch = useDispatch()\n//   const { account }: { account: string } = useWallet()\n//   const sousChefContract = useSousChef(sousId)\n//   const handleApprove = useCallback(async () => {\n//     try {\n//       const tx = await approve(lpContract, sousChefContract, account)\n//       dispatch(updateUserAllowance(sousId, account))\n//       return tx\n//     } catch (e) {\n//       return false\n//     }\n//   }, [account, dispatch, lpContract, sousChefContract, sousId])\n//   return { onApprove: handleApprove }\n// }\n// Approve the lottery\n\n_s(useApprove, \"912YkJ6AGYumCBnuye56mVxNDwo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useLotteryApprove = () => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const lotteryContract = useLottery();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s2(useLotteryApprove, \"qmmDwizDBCPS/KQkbYFMkBrCi+A=\", false, function () {\n  return [useWallet, useCake, useLottery];\n});\n\nexport const useIfoApprove = (tokenContract, spenderAddress) => {\n  _s3();\n\n  const {\n    account\n  } = useWallet();\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n        from: account\n      });\n      return tx;\n    } catch {\n      return false;\n    }\n  }, [account, spenderAddress, tokenContract]);\n  return onApprove;\n};\n\n_s3(useIfoApprove, \"5YEWPx3HiFEhK5UYbT6NzOlDPbw=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"sources":["D:/Quecko/last-update lilefarm/lileswapfarms/src/hooks/useApprove.ts"],"names":["useCallback","useWallet","ethers","useDispatch","fetchFarmUserDataAsync","approve","useMasterchef","useCake","useLottery","useApprove","lpContract","dispatch","account","masterChefContract","handleApprove","tx","e","console","log","onApprove","useLotteryApprove","cakeContract","lotteryContract","useIfoApprove","tokenContract","spenderAddress","methods","constants","MaxUint256","send","from"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,sBAAR,QAAsC,eAAtC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,UAAjC,QAAmD,eAAnD,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAA0B;AAAA;;AAClD,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAmCX,SAAS,EAAlD;AACA,QAAMY,kBAAkB,GAAGP,aAAa,EAAxC;AAEA,QAAMQ,aAAa,GAAGd,WAAW,CAAC,YAAY;AAC5C,QAAI;AACF,YAAMe,EAAE,GAAG,MAAMV,OAAO,CAACK,UAAD,EAAaG,kBAAb,EAAiCD,OAAjC,CAAxB;AAEAD,MAAAA,QAAQ,CAACP,sBAAsB,CAACQ,OAAD,CAAvB,CAAR;AACA,aAAOG,EAAP;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAwBF,CAAxB;AACA,aAAO,KAAP;AACD;AACF,GAVgC,EAU9B,CAACJ,OAAD,EAAUD,QAAV,EAAoBD,UAApB,EAAgCG,kBAAhC,CAV8B,CAAjC;AAWA,SAAO;AAAEM,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAjBM,C,CAmBP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;GAtCaL,U;UACMN,W,EACwBF,S,EACdK,a;;;AAoC7B,OAAO,MAAMc,iBAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM;AAAER,IAAAA;AAAF,MAAmCX,SAAS,EAAlD;AACA,QAAMoB,YAAY,GAAGd,OAAO,EAA5B;AACA,QAAMe,eAAe,GAAGd,UAAU,EAAlC;AAEA,QAAMM,aAAa,GAAGd,WAAW,CAAC,YAAY;AAC5C,QAAI;AACF,YAAMe,EAAE,GAAG,MAAMV,OAAO,CAACgB,YAAD,EAAeC,eAAf,EAAgCV,OAAhC,CAAxB;AACA,aAAOG,EAAP;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF,GAPgC,EAO9B,CAACJ,OAAD,EAAUS,YAAV,EAAwBC,eAAxB,CAP8B,CAAjC;AASA,SAAO;AAAEH,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAfM,C,CAiBP;;IAjBaM,iB;UAC8BnB,S,EACpBM,O,EACGC,U;;;AAe1B,OAAO,MAAMe,aAAa,GAAG,CAACC,aAAD,EAA0BC,cAA1B,KAAqD;AAAA;;AAChF,QAAM;AAAEb,IAAAA;AAAF,MAAcX,SAAS,EAA7B;AACA,QAAMkB,SAAS,GAAGnB,WAAW,CAAC,YAAY;AACxC,QAAI;AACF,YAAMe,EAAE,GAAG,MAAMS,aAAa,CAACE,OAAd,CACdrB,OADc,CACNoB,cADM,EACUvB,MAAM,CAACyB,SAAP,CAAiBC,UAD3B,EAEdC,IAFc,CAET;AAAEC,QAAAA,IAAI,EAAElB;AAAR,OAFS,CAAjB;AAGA,aAAOG,EAAP;AACD,KALD,CAKE,MAAM;AACN,aAAO,KAAP;AACD;AACF,GAT4B,EAS1B,CAACH,OAAD,EAAUa,cAAV,EAA0BD,aAA1B,CAT0B,CAA7B;AAWA,SAAOL,SAAP;AACD,CAdM;;IAAMI,a;UACStB,S","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport {fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      console.log(\"error::\" , e)\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\n// export const useSousApprove = (lpContract: Contract, sousId) => {\r\n//   const dispatch = useDispatch()\r\n//   const { account }: { account: string } = useWallet()\r\n//   const sousChefContract = useSousChef(sousId)\r\n\r\n//   const handleApprove = useCallback(async () => {\r\n//     try {\r\n//       const tx = await approve(lpContract, sousChefContract, account)\r\n//       dispatch(updateUserAllowance(sousId, account))\r\n//       return tx\r\n//     } catch (e) {\r\n//       return false\r\n//     }\r\n//   }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n//   return { onApprove: handleApprove }\r\n// }\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n"]},"metadata":{},"sourceType":"module"}