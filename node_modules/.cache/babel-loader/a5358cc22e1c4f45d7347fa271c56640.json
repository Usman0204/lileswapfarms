{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { unstake } from 'utils/callHelpers';\nimport { useMasterchef } from './useContract';\n\nconst useUnstake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"zJOfsUBwQjUSBQmKcK0zWz87/wI=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]; // export const useSousUnstake = (sousId) => {\n//   const dispatch = useDispatch()\n//   const { account } = useWallet()\n//   const masterChefContract = useMasterchef()\n//   const sousChefContract = useSousChef(sousId)\n//   const isOldSyrup = SYRUPIDS.includes(sousId)\n//   const handleUnstake = useCallback(\n//     async (amount: string) => {\n//       if (sousId === 0) {\n//         const txHash = await unstake(masterChefContract, 0, amount, account)\n//         console.info(txHash)\n//       } else if (isOldSyrup) {\n//         const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n//         console.info(txHash)\n//       } else {\n//         const txHash = await sousUnstake(sousChefContract, amount, account)\n//         console.info(txHash)\n//       }\n//       dispatch(updateUserStakedBalance(sousId, account))\n//       dispatch(updateUserBalance(sousId, account))\n//       dispatch(updateUserPendingReward(sousId, account))\n//     },\n//     [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n//   )\n//   return { onUnstake: handleUnstake }\n// }\n\nexport default useUnstake;","map":{"version":3,"sources":["/home/waleed/Quecko/LileSwap/lileswapfarms-master/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","unstake","useMasterchef","useUnstake","pid","dispatch","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","SYRUPIDS"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,sBADF,QAEO,eAFP;AAGA,SAASC,OAAT,QAA0D,mBAA1D;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAEA,MAAMC,UAAU,GAAIC,GAAD,IAAiB;AAAA;;AAClC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAMS,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,aAAa,GAAGX,WAAW,CAC/B,MAAOY,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMT,OAAO,CAACM,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,CAA5B;AACAD,IAAAA,QAAQ,CAACL,sBAAsB,CAACM,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL8B,EAM/B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN+B,CAAjC;AASA,SAAO;AAAES,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAfD;;GAAML,U;UACaJ,W,EACGD,S,EACOI,a;;;AAc7B,MAAMY,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,CAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,eAAeX,UAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\n// export const useSousUnstake = (sousId) => {\n//   const dispatch = useDispatch()\n//   const { account } = useWallet()\n//   const masterChefContract = useMasterchef()\n//   const sousChefContract = useSousChef(sousId)\n//   const isOldSyrup = SYRUPIDS.includes(sousId)\n\n//   const handleUnstake = useCallback(\n//     async (amount: string) => {\n//       if (sousId === 0) {\n//         const txHash = await unstake(masterChefContract, 0, amount, account)\n//         console.info(txHash)\n//       } else if (isOldSyrup) {\n//         const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n//         console.info(txHash)\n//       } else {\n//         const txHash = await sousUnstake(sousChefContract, amount, account)\n//         console.info(txHash)\n//       }\n//       dispatch(updateUserStakedBalance(sousId, account))\n//       dispatch(updateUserBalance(sousId, account))\n//       dispatch(updateUserPendingReward(sousId, account))\n//     },\n//     [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n//   )\n\n//   return { onUnstake: handleUnstake }\n// }\n\nexport default useUnstake\n"]},"metadata":{},"sourceType":"module"}