{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s13 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useRefresh from 'hooks/useRefresh';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions';\nimport { QuoteToken } from '../config/constants/types';\nconst ZERO = new BigNumber(0);\nconst ZEROPOINT1 = new BigNumber(0.01);\nconst SIXSIXTY = new BigNumber(660);\nexport const useFetchPublicData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync());\n    dispatch(fetchPoolsPublicDataAsync());\n  }, [dispatch, slowRefresh]);\n};\n\n_s(useFetchPublicData, \"62xjdgPJn/QiIg6iwBNbkeZ7l4I=\", false, function () {\n  return [useDispatch, useRefresh];\n});\n\nexport const usePriceEthBusd = () => {\n  // const pid = 14 // ETH-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  return ZEROPOINT1;\n}; // Farms\n\nexport const useFarms = () => {\n  _s2();\n\n  const farms = useSelector(state => state.farms.data);\n  return farms;\n};\n\n_s2(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s3();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s3(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromSymbol = lpSymbol => {\n  _s4();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s4(useFarmFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s5();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // Pools\n\n_s5(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePools = account => {\n  _s6();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const farms = useSelector(state => state.pools.data);\n  return farms;\n};\n\n_s6(usePools, \"dfKx6U3OwOnZJkC3I7IPV8XnSiA=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const usePoolFromPid = pid => {\n  _s7();\n\n  const farm = useSelector(state => state.pools.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s7(usePoolFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolFromSymbol = lpSymbol => {\n  _s8();\n\n  const farm = useSelector(state => state.pools.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s8(usePoolFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolUser = pid => {\n  _s9();\n\n  const farm = usePoolFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // export const usePools = (account): Pool[] => {\n//   const { fastRefresh } = useRefresh()\n//   const dispatch = useDispatch()\n//   useEffect(() => {\n//     if (account) {\n//       dispatch(fetchPoolsUserDataAsync(account))\n//     }\n//   }, [account, dispatch, fastRefresh])\n//   const pools = useSelector((state: State) => state.pools.data)\n//   return pools\n// }\n// export const usePoolFromPid = (sousId): Pool => {\n//   const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n//   return pool\n// }\n// Prices\n\n_s9(usePoolUser, \"d+dmHpvtZ8p8srupICf0N0ldK/I=\", false, function () {\n  return [usePoolFromPid];\n});\n\nexport const usePriceBnbBusd = () => {\n  _s10();\n\n  const pid = 1; // BUSD-BNB LP\n\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO; // return SIXSIXTY\n};\n\n_s10(usePriceBnbBusd, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePriceCakeBusd = () => {\n  _s11();\n\n  const pid = 0; // LILE-BNB LP\n\n  const bnbPriceUSD = usePriceBnbBusd();\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZEROPOINT1; // return ZEROPOINT1\n  // const pid = 2 // LILE-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n};\n\n_s11(usePriceCakeBusd, \"XFAtU4CCq8QZhqqSng08R0qLgoc=\", false, function () {\n  return [usePriceBnbBusd, useFarmFromPid];\n});\n\nexport const useTotalValue = async () => {\n  _s13();\n\n  const api = 'https://api.pancakeswap.info/api/tokens';\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    var _s12 = $RefreshSig$();\n\n    const fetchData = async () => {\n      _s12();\n\n      try {\n        const response = await fetch(api);\n        const res = await response.json();\n        const farms = useFarms();\n        const {\n          account,\n          ethereum\n        } = useWallet();\n        const farmsLP = usePools(account);\n        console.log(\"pools::::\", farmsLP);\n        console.log(\"farms::::\", farms);\n        const bnbPrice = usePriceBnbBusd();\n        const cakePrice = usePriceCakeBusd();\n        let value = new BigNumber(0); // const res: any = await fetch(\"https://api.pancakeswap.info/api/tokens\");\n\n        for (let i = 0; i < farms.length; i++) {\n          const farm = farms[i];\n          const price = new BigNumber(1); // if (res.data) {\n          //   price = res.data[`${farm.quoteTokenAdresses[56]}`] ? new BigNumber(res.data[`${farm.quoteTokenAdresses[56]}`]) : new BigNumber(1)\n          // } else {\n          //   price = new BigNumber(1)\n          // }\n\n          if (farm.lpTotalInQuoteToken) {\n            let val;\n\n            if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n              val = bnbPrice.times(farm.lpTotalInQuoteToken);\n            } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n              val = cakePrice.times(farm.lpTotalInQuoteToken);\n            } else {\n              // val = price.times(farm.lpTotalInQuoteToken)\n              val = farm.lpTotalInQuoteToken;\n            }\n\n            value = value.plus(val);\n          }\n        }\n\n        console.log(\"end value\", value);\n        setData(value);\n      } catch (error) {\n        console.error('Unable to fetch price data:', error);\n      }\n    };\n\n    _s12(fetchData, \"dO6GLiA9n59uZQfv8xR40eoeARc=\", false, function () {\n      return [useFarms, useWallet, usePools, usePriceBnbBusd, usePriceCakeBusd];\n    });\n\n    fetchData();\n  }, [setData]);\n  return data;\n};\n\n_s13(useTotalValue, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"sources":["/home/waleed/Quecko/LileSwap/lileswapfarms-master/src/state/hooks.ts"],"names":["BigNumber","useEffect","useState","useSelector","useDispatch","useRefresh","useWallet","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","QuoteToken","ZERO","ZEROPOINT1","SIXSIXTY","useFetchPublicData","dispatch","slowRefresh","usePriceEthBusd","useFarms","farms","state","data","useFarmFromPid","pid","farm","find","f","useFarmFromSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","usePools","account","fastRefresh","pools","usePoolFromPid","usePoolFromSymbol","usePoolUser","usePriceBnbBusd","tokenPriceVsQuote","usePriceCakeBusd","bnbPriceUSD","times","useTotalValue","api","setData","fetchData","response","fetch","res","json","ethereum","farmsLP","console","log","bnbPrice","cakePrice","value","i","length","price","lpTotalInQuoteToken","val","quoteTokenSymbol","BNB","CAKE","plus","error"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect, useState, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { provider } from 'web3-core';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\nconst ZEROPOINT1 = new BigNumber(0.01)\nconst SIXSIXTY = new BigNumber(660)\n\n\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\nexport const usePriceEthBusd = (): BigNumber => {\n  // const pid = 14 // ETH-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  return ZEROPOINT1\n\n}\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const farms = useSelector((state: State) => state.pools.data)\n  return farms\n}\n\nexport const usePoolFromPid = (pid): Pool => {\n  const farm = useSelector((state: State) => state.pools.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const usePoolFromSymbol = (lpSymbol: string): Pool => {\n  const farm = useSelector((state: State) => state.pools.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const usePoolUser = (pid) => {\n  const farm = usePoolFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// export const usePools = (account): Pool[] => {\n//   const { fastRefresh } = useRefresh()\n//   const dispatch = useDispatch()\n//   useEffect(() => {\n//     if (account) {\n//       dispatch(fetchPoolsUserDataAsync(account))\n//     }\n//   }, [account, dispatch, fastRefresh])\n\n//   const pools = useSelector((state: State) => state.pools.data)\n//   return pools\n// }\n\n// export const usePoolFromPid = (sousId): Pool => {\n//   const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n//   return pool\n// }\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 1 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n  // return SIXSIXTY\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 0// LILE-BNB LP\n  const bnbPriceUSD = usePriceBnbBusd()\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZEROPOINT1\n  // return ZEROPOINT1\n\n  // const pid = 2 // LILE-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = async () => {\n  const api = 'https://api.pancakeswap.info/api/tokens';\n\n\n  const [data, setData] = useState<any | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(api)\n        const res: ApiResponse = await response.json()\n\n        const farms = useFarms()\n        const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n        const farmsLP = usePools(account)\n      \n        console.log(\"pools::::\", farmsLP)\n        console.log(\"farms::::\", farms)\n      \n        const bnbPrice = usePriceBnbBusd()\n        const cakePrice = usePriceCakeBusd()\n        let value = new BigNumber(0)\n        // const res: any = await fetch(\"https://api.pancakeswap.info/api/tokens\");\n        for (let i = 0; i < farms.length; i++) {\n          const farm = farms[i]\n          const price = new BigNumber(1)\n          // if (res.data) {\n          //   price = res.data[`${farm.quoteTokenAdresses[56]}`] ? new BigNumber(res.data[`${farm.quoteTokenAdresses[56]}`]) : new BigNumber(1)\n          // } else {\n          //   price = new BigNumber(1)\n          // }\n          if (farm.lpTotalInQuoteToken) {\n            let val\n            if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n              val = bnbPrice.times(farm.lpTotalInQuoteToken)\n            } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n              val = cakePrice.times(farm.lpTotalInQuoteToken)\n            }\n            else {\n              // val = price.times(farm.lpTotalInQuoteToken)\n              val = farm.lpTotalInQuoteToken\n            }\n            value = value.plus(val)\n          }\n      \n        }\n      \n        console.log(\"end value\", value)\n        setData(value)\n      } catch (error) {\n        console.error('Unable to fetch price data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}