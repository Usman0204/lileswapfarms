{"ast":null,"code":"import web3NoAccount from 'utils/web3';\nimport { poolsConfig } from 'config/constants';\nimport { PoolCategory } from 'config/constants/types'; // Addresses\n\nimport { getAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getMasterChefAddress } from 'utils/addressHelpers'; // ABI\n\nimport bep20Abi from 'config/abi/erc20.json';\nimport cakeAbi from 'config/abi/cake.json';\nimport ifoAbi from 'config/abi/ifo.json';\nimport lotteryAbi from 'config/abi/lottery.json';\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json';\nimport masterChef from 'config/abi/masterchef.json';\nimport sousChef from 'config/abi/sousChef.json';\nimport sousChefBnb from 'config/abi/sousChefBnb.json';\n\nconst getContract = (abi, address, web3) => {\n  const _web3 = web3 !== null && web3 !== void 0 ? web3 : web3NoAccount;\n\n  return new _web3.eth.Contract(abi, address);\n};\n\nexport const getBep20Contract = (address, web3) => {\n  return getContract(bep20Abi, address, web3);\n};\nexport const getIfoContract = (address, web3) => {\n  return getContract(ifoAbi, address, web3);\n};\nexport const getSouschefContract = (id, web3) => {\n  const config = poolsConfig.find(pool => pool.sousId === id);\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef;\n  return getContract(abi, getAddress(config.contractAddress), web3);\n};\nexport const getCakeContract = web3 => {\n  return getContract(cakeAbi, getCakeAddress(), web3);\n};\nexport const getLotteryContract = web3 => {\n  return getContract(lotteryAbi, getLotteryAddress(), web3);\n};\nexport const getLotteryTicketContract = web3 => {\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3);\n};\nexport const getMasterchefContract = web3 => {\n  return getContract(masterChef, getMasterChefAddress(), web3);\n};","map":{"version":3,"sources":["/home/waleed/Quecko/lileswapfarms/src/utils/contractHelpers.ts"],"names":["web3NoAccount","poolsConfig","PoolCategory","getAddress","getCakeAddress","getLotteryAddress","getLotteryTicketAddress","getMasterChefAddress","bep20Abi","cakeAbi","ifoAbi","lotteryAbi","lotteryTicketAbi","masterChef","sousChef","sousChefBnb","getContract","abi","address","web3","_web3","eth","Contract","getBep20Contract","getIfoContract","getSouschefContract","id","config","find","pool","sousId","poolCategory","BINANCE","contractAddress","getCakeContract","getLotteryContract","getLotteryTicketContract","getMasterchefContract"],"mappings":"AAEA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAA6B,wBAA7B,C,CAEA;;AACA,SACEC,UADF,EAGEC,cAHF,EAIEC,iBAJF,EAKEC,uBALF,EAMEC,oBANF,QAOO,sBAPP,C,CASA;;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;AAEA,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAWC,OAAX,EAA4BC,IAA5B,KAA4C;AAC9D,QAAMC,KAAK,GAAGD,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAWnB,aAAtB;;AACA,SAAO,IAAIoB,KAAK,CAACC,GAAN,CAAUC,QAAd,CAAwBL,GAAxB,EAAoDC,OAApD,CAAP;AACD,CAHD;;AAKA,OAAO,MAAMK,gBAAgB,GAAG,CAACL,OAAD,EAAkBC,IAAlB,KAAkC;AAChE,SAAOH,WAAW,CAACR,QAAD,EAAWU,OAAX,EAAoBC,IAApB,CAAlB;AACD,CAFM;AAGP,OAAO,MAAMK,cAAc,GAAG,CAACN,OAAD,EAAkBC,IAAlB,KAAkC;AAC9D,SAAOH,WAAW,CAACN,MAAD,EAASQ,OAAT,EAAkBC,IAAlB,CAAlB;AACD,CAFM;AAGP,OAAO,MAAMM,mBAAmB,GAAG,CAACC,EAAD,EAAaP,IAAb,KAA6B;AAC9D,QAAMQ,MAAM,GAAG1B,WAAW,CAAC2B,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBJ,EAA3C,CAAf;AACA,QAAMT,GAAG,GAAGU,MAAM,CAACI,YAAP,KAAwB7B,YAAY,CAAC8B,OAArC,GAA+CjB,WAA/C,GAA6DD,QAAzE;AACA,SAAOE,WAAW,CAACC,GAAD,EAAMd,UAAU,CAACwB,MAAM,CAACM,eAAR,CAAhB,EAA0Cd,IAA1C,CAAlB;AACD,CAJM;AAMP,OAAO,MAAMe,eAAe,GAAIf,IAAD,IAAiB;AAC9C,SAAOH,WAAW,CAACP,OAAD,EAAUL,cAAc,EAAxB,EAA4Be,IAA5B,CAAlB;AACD,CAFM;AAIP,OAAO,MAAMgB,kBAAkB,GAAIhB,IAAD,IAAiB;AACjD,SAAOH,WAAW,CAACL,UAAD,EAAaN,iBAAiB,EAA9B,EAAkCc,IAAlC,CAAlB;AACD,CAFM;AAGP,OAAO,MAAMiB,wBAAwB,GAAIjB,IAAD,IAAiB;AACvD,SAAOH,WAAW,CAACJ,gBAAD,EAAmBN,uBAAuB,EAA1C,EAA8Ca,IAA9C,CAAlB;AACD,CAFM;AAGP,OAAO,MAAMkB,qBAAqB,GAAIlB,IAAD,IAAiB;AACpD,SAAOH,WAAW,CAACH,UAAD,EAAaN,oBAAoB,EAAjC,EAAqCY,IAArC,CAAlB;AACD,CAFM","sourcesContent":["import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport web3NoAccount from 'utils/web3'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\n\n// Addresses\nimport {\n  getAddress,\n\n  getCakeAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getMasterChefAddress,\n} from 'utils/addressHelpers'\n\n// ABI\nimport bep20Abi from 'config/abi/erc20.json'\nimport cakeAbi from 'config/abi/cake.json'\nimport ifoAbi from 'config/abi/ifo.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst getContract = (abi: any, address: string, web3?: Web3) => {\n  const _web3 = web3 ?? web3NoAccount\n  return new _web3.eth.Contract((abi as unknown) as AbiItem, address)\n}\n\nexport const getBep20Contract = (address: string, web3?: Web3) => {\n  return getContract(bep20Abi, address, web3)\n}\nexport const getIfoContract = (address: string, web3?: Web3) => {\n  return getContract(ifoAbi, address, web3)\n}\nexport const getSouschefContract = (id: number, web3?: Web3) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  return getContract(abi, getAddress(config.contractAddress), web3)\n}\n\nexport const getCakeContract = (web3?: Web3) => {\n  return getContract(cakeAbi, getCakeAddress(), web3)\n}\n\nexport const getLotteryContract = (web3?: Web3) => {\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\n}\nexport const getLotteryTicketContract = (web3?: Web3) => {\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\n}\nexport const getMasterchefContract = (web3?: Web3) => {\n  return getContract(masterChef, getMasterChefAddress(), web3)\n}\n"]},"metadata":{},"sourceType":"module"}