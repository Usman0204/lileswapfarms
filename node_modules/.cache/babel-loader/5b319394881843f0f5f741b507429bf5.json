{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions';\nimport { QuoteToken } from '../config/constants/types';\nconst ZERO = new BigNumber(0);\nconst ZEROPOINT1 = new BigNumber(0.01);\nconst SIXSIXTY = new BigNumber(660);\nexport const useFetchPublicData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync());\n    dispatch(fetchPoolsPublicDataAsync());\n  }, [dispatch, slowRefresh]);\n};\n\n_s(useFetchPublicData, \"62xjdgPJn/QiIg6iwBNbkeZ7l4I=\", false, function () {\n  return [useDispatch, useRefresh];\n});\n\nexport const usePriceEthBusd = () => {\n  // const pid = 14 // ETH-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  return ZEROPOINT1;\n}; // Farms\n\nexport const useFarms = () => {\n  _s2();\n\n  const farms = useSelector(state => state.farms.data);\n  return farms;\n};\n\n_s2(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s3();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s3(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromSymbol = lpSymbol => {\n  _s4();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s4(useFarmFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s5();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // Pools\n\n_s5(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePools = account => {\n  _s6();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const farms = useSelector(state => state.pools.data);\n  return farms;\n};\n\n_s6(usePools, \"dfKx6U3OwOnZJkC3I7IPV8XnSiA=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const usePoolFromPid = pid => {\n  _s7();\n\n  const farm = useSelector(state => state.pools.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s7(usePoolFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolFromSymbol = lpSymbol => {\n  _s8();\n\n  const farm = useSelector(state => state.pools.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s8(usePoolFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolUser = pid => {\n  _s9();\n\n  const farm = usePoolFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // export const usePools = (account): Pool[] => {\n//   const { fastRefresh } = useRefresh()\n//   const dispatch = useDispatch()\n//   useEffect(() => {\n//     if (account) {\n//       dispatch(fetchPoolsUserDataAsync(account))\n//     }\n//   }, [account, dispatch, fastRefresh])\n//   const pools = useSelector((state: State) => state.pools.data)\n//   return pools\n// }\n// export const usePoolFromPid = (sousId): Pool => {\n//   const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n//   return pool\n// }\n// Prices\n\n_s9(usePoolUser, \"d+dmHpvtZ8p8srupICf0N0ldK/I=\", false, function () {\n  return [usePoolFromPid];\n});\n\nexport const usePriceBnbBusd = () => {\n  // const pid = 1 // BUSD-BNB LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : SIXSIXTY\n  return SIXSIXTY;\n};\nexport const usePriceCakeBusd = () => {\n  // const pid = 0// CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZEROPOINT1\n  return ZEROPOINT1; // const pid = 2 // LILE-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n};\nexport const useTotalValue = () => {\n  _s10();\n\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i];\n\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken);\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken);\n      } else {\n        val = farm.lpTotalInQuoteToken;\n      }\n\n      value = value.plus(val);\n    }\n  }\n\n  return value;\n};\n\n_s10(useTotalValue, \"r6KOcd+Au1Cbju+lCn+Kj9ulyJM=\", false, function () {\n  return [useFarms, usePriceBnbBusd, usePriceCakeBusd];\n});","map":{"version":3,"sources":["/home/waleed/Quecko/lileswapfarms-master/src/state/hooks.ts"],"names":["BigNumber","useEffect","useSelector","useDispatch","useRefresh","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","QuoteToken","ZERO","ZEROPOINT1","SIXSIXTY","useFetchPublicData","dispatch","slowRefresh","usePriceEthBusd","useFarms","farms","state","data","useFarmFromPid","pid","farm","find","f","useFarmFromSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","usePools","account","fastRefresh","pools","usePoolFromPid","usePoolFromSymbol","usePoolUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","BNB","times","CAKE","plus"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\nconst ZEROPOINT1 = new BigNumber(0.01)\nconst SIXSIXTY = new BigNumber(660)\n\n\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\nexport const usePriceEthBusd = (): BigNumber => {\n  // const pid = 14 // ETH-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  return ZEROPOINT1\n\n}\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const farms = useSelector((state: State) => state.pools.data)\n  return farms\n}\n\nexport const usePoolFromPid = (pid): Pool => {\n  const farm = useSelector((state: State) => state.pools.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const usePoolFromSymbol = (lpSymbol: string): Pool => {\n  const farm = useSelector((state: State) => state.pools.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const usePoolUser = (pid) => {\n  const farm = usePoolFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// export const usePools = (account): Pool[] => {\n//   const { fastRefresh } = useRefresh()\n//   const dispatch = useDispatch()\n//   useEffect(() => {\n//     if (account) {\n//       dispatch(fetchPoolsUserDataAsync(account))\n//     }\n//   }, [account, dispatch, fastRefresh])\n\n//   const pools = useSelector((state: State) => state.pools.data)\n//   return pools\n// }\n\n// export const usePoolFromPid = (sousId): Pool => {\n//   const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n//   return pool\n// }\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  // const pid = 1 // BUSD-BNB LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : SIXSIXTY\n  return SIXSIXTY\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 0// CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZEROPOINT1\n  return ZEROPOINT1\n\n  // const pid = 2 // LILE-BUSD LP\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}