{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Quecko\\\\l-lileSWAP\\\\updated farms repo\\\\lileswapfarms\\\\src\\\\views\\\\Pools\\\\Syrup.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useI18n from 'hooks/useI18n';\nimport useBlock from 'hooks/useBlock';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useFarms, usePriceBnbBusd, usePools } from 'state/hooks';\nimport { QuoteToken, PoolCategory } from 'config/constants/types';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport Coming from './components/Coming';\nimport PoolCard from './components/PoolCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport Divider from './components/Divider';\n\nconst Farm = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const farms = useFarms();\n  const pools = usePools(account);\n  const bnbPriceUSD = usePriceBnbBusd();\n  const block = useBlock();\n\n  const priceToBnb = (tokenName, tokenPrice, quoteToken) => {\n    const tokenPriceBN = new BigNumber(tokenPrice);\n\n    if (tokenName === 'BNB') {\n      return new BigNumber(1);\n    }\n\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD);\n    }\n\n    return tokenPriceBN;\n  };\n\n  const poolsWithApy = pools.map(pool => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE;\n    const rewardTokenFarm = farms.find(f => f.tokenSymbol === pool.tokenName);\n    const stakingTokenFarm = farms.find(s => s.tokenSymbol === pool.stakingTokenName); // /!\\ Assume that the farm quote price is BNB\n\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm === null || stakingTokenFarm === void 0 ? void 0 : stakingTokenFarm.tokenPriceVsQuote);\n    const rewardTokenPriceInBNB = priceToBnb(pool.tokenName, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.tokenPriceVsQuote, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.quoteTokenSymbol);\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR);\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked));\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n    return { ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apy\n    };\n  });\n  const [finishedPools, openPools] = partition(poolsWithApy, pool => pool.isFinished);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"xxl\",\n          mb: \"16px\",\n          children: TranslateString(282, 'SYRUP Pool')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(580, 'Stake CAKE to earn new tokens.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(404, 'You can unstake at any time.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(406, 'Rewards are calculated per block.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/syrup.png\",\n        alt: \"SYRUP POOL icon\",\n        width: 410,\n        height: 191\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PoolTabButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [orderBy(openPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Coming, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${path}/history`,\n        children: orderBy(finishedPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n          pool: pool\n        }, pool.sousId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"/images/LILE/8.png\",\n      alt: \"illustration\",\n      width: 1352,\n      height: 587,\n      responsive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farm, \"F3SGgCXshECae7B63xHze5yMSvs=\", false, function () {\n  return [useRouteMatch, useI18n, useWallet, useFarms, usePools, usePriceBnbBusd, useBlock];\n});\n\n_c = Farm;\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`;\n_c2 = Hero;\nexport default Farm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Farm\");\n$RefreshReg$(_c2, \"Hero\");","map":{"version":3,"sources":["D:/Quecko/l-lileSWAP/updated farms repo/lileswapfarms/src/views/Pools/Syrup.tsx"],"names":["React","Route","useRouteMatch","BigNumber","styled","useWallet","Heading","BLOCKS_PER_YEAR","orderBy","partition","useI18n","useBlock","getBalanceNumber","useFarms","usePriceBnbBusd","usePools","QuoteToken","PoolCategory","FlexLayout","Page","Coming","PoolCard","PoolTabButtons","Divider","Farm","path","TranslateString","account","farms","pools","bnbPriceUSD","block","priceToBnb","tokenName","tokenPrice","quoteToken","tokenPriceBN","BUSD","div","poolsWithApy","map","pool","isBnbPool","poolCategory","BINANCE","rewardTokenFarm","find","f","tokenSymbol","stakingTokenFarm","s","stakingTokenName","stakingTokenPriceInBNB","tokenPriceVsQuote","rewardTokenPriceInBNB","quoteTokenSymbol","totalRewardPricePerYear","times","tokenPerBlock","totalStakingTokenInPool","totalStaked","apy","isFinished","sousId","endBlock","finishedPools","openPools","Hero","theme","colors","primary"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useBlock from 'hooks/useBlock'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useFarms, usePriceBnbBusd, usePools } from 'state/hooks'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport Coming from './components/Coming'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst Farm: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const farms = useFarms()\r\n  const pools = usePools(account)\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  const block = useBlock()\r\n\r\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\r\n    const tokenPriceBN = new BigNumber(tokenPrice)\r\n    if (tokenName === 'BNB') {\r\n      return new BigNumber(1)\r\n    }\r\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\r\n      return tokenPriceBN.div(bnbPriceUSD)\r\n    }\r\n    return tokenPriceBN\r\n  }\r\n\r\n  const poolsWithApy = pools.map((pool) => {\r\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\r\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\r\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\r\n\r\n    // /!\\ Assume that the farm quote price is BNB\r\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\r\n    const rewardTokenPriceInBNB = priceToBnb(\r\n      pool.tokenName,\r\n      rewardTokenFarm?.tokenPriceVsQuote,\r\n      rewardTokenFarm?.quoteTokenSymbol,\r\n    )\r\n\r\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\r\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n\r\n    return {\r\n      ...pool,\r\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\r\n      apy,\r\n    }\r\n  })\r\n\r\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\r\n            {TranslateString(282, 'SYRUP Pool')}\r\n          </Heading>\r\n          <ul>\r\n            <li>{TranslateString(580, 'Stake CAKE to earn new tokens.')}</li>\r\n            <li>{TranslateString(404, 'You can unstake at any time.')}</li>\r\n            <li>{TranslateString(406, 'Rewards are calculated per block.')}</li>\r\n          </ul>\r\n        </div>\r\n        <img src=\"/images/syrup.png\" alt=\"SYRUP POOL icon\" width={410} height={191} />\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          <>\r\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\r\n              <PoolCard key={pool.sousId} pool={pool} />\r\n            ))}\r\n            <Coming />\r\n          </>\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n            <PoolCard key={pool.sousId} pool={pool} />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n      <Image src=\"/images/LILE/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 100%;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Farm\r\n"]},"metadata":{},"sourceType":"module"}