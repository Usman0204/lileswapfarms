{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { stake } from 'utils/callHelpers';\nimport { useMasterchef } from './useContract';\n\nconst useStake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n}; // export const useSousStake = (sousId, isUsingBnb = false) => {\n//   const dispatch = useDispatch()\n//   const { account } = useWallet()\n//   const masterChefContract = useMasterchef()\n//   const sousChefContract = useSousChef(sousId)\n//   const handleStake = useCallback(\n//     async (amount: string) => {\n//       if (sousId === 0) {\n//         await stake(masterChefContract, 0, amount, account)\n//       } else if (isUsingBnb) {\n//         await sousStakeBnb(sousChefContract, amount, account)\n//       } else {\n//         await sousStake(sousChefContract, amount, account)\n//       }\n//       dispatch(updateUserStakedBalance(sousId, account))\n//       dispatch(updateUserBalance(sousId, account))\n//     },\n//     [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n//   )\n//   return { onStake: handleStake }\n// }\n\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/home/waleed/lileswapfarms/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","stake","useMasterchef","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,KAAT,QAA+C,mBAA/C;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;AAAA;;AAChC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAMS,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,WAAW,GAAGX,WAAW,CAC7B,MAAOY,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMT,KAAK,CAACM,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,CAA1B;AACAD,IAAAA,QAAQ,CAACL,sBAAsB,CAACM,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL4B,EAM7B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN6B,CAA/B;AASA,SAAO;AAAES,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;GAvCML,Q;UACaJ,W,EACGD,S,EACOI,a;;;AAsC7B,eAAeC,QAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\n// export const useSousStake = (sousId, isUsingBnb = false) => {\n//   const dispatch = useDispatch()\n//   const { account } = useWallet()\n//   const masterChefContract = useMasterchef()\n//   const sousChefContract = useSousChef(sousId)\n\n//   const handleStake = useCallback(\n//     async (amount: string) => {\n//       if (sousId === 0) {\n//         await stake(masterChefContract, 0, amount, account)\n//       } else if (isUsingBnb) {\n//         await sousStakeBnb(sousChefContract, amount, account)\n//       } else {\n//         await sousStake(sousChefContract, amount, account)\n//       }\n//       dispatch(updateUserStakedBalance(sousId, account))\n//       dispatch(updateUserBalance(sousId, account))\n//     },\n//     [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n//   )\n\n//   return { onStake: handleStake }\n// }\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}